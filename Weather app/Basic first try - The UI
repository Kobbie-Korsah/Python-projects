# Import necessary modules
import sys                    # For handling system-specific parameters and functions
import requests               # (Not used yet, but typically for fetching weather data from an API)
from PyQt5.QtWidgets import (  # Import necessary Qt widgets for building the GUI
    QApplication, QWidget, QLabel,
    QLineEdit, QPushButton, QVBoxLayout
)
from PyQt5.QtCore import Qt    # Provides alignment and other core functionalities

# Define the main WeatherApp class that inherits from QWidget (a basic window in PyQt5)
class WeatherApp(QWidget):
    def __init__(self):
        super().__init__()  # Initialize the QWidget base class

        # Create and configure widgets
        self.city_label = QLabel("Enter city name: ", self)  # Label prompting for a city
        self.city_input = QLineEdit(self)                    # Text box for user to type city name
        self.get_weather_button = QPushButton("Get Weather", self)  # Button to fetch weather
        self.temperature_label = QLabel("14°C", self)        # Label to display temperature
        self.emoji_label = QLabel("☀", self)                 # Label to display weather emoji
        self.description_label = QLabel("Sunny", self)       # Label to describe weather

        # Call function to set up the interface layout and style
        self.initUI()

    def initUI(self):
        """Initializes the layout, alignment, and visual styling for the weather app."""
        self.setWindowTitle("Weather App")  # Set the window title

        # Create a vertical layout (elements will be stacked top-to-bottom)
        vbox = QVBoxLayout()

        # Add all widgets to the layout in order
        vbox.addWidget(self.city_label)
        vbox.addWidget(self.city_input)
        vbox.addWidget(self.get_weather_button)
        vbox.addWidget(self.temperature_label)
        vbox.addWidget(self.emoji_label)
        vbox.addWidget(self.description_label)

        # Apply the layout to the window
        self.setLayout(vbox)
        
        # Center-align text for all labels and input fields
        self.city_label.setAlignment(Qt.AlignCenter)
        self.city_input.setAlignment(Qt.AlignCenter)
        self.temperature_label.setAlignment(Qt.AlignCenter)
        self.emoji_label.setAlignment(Qt.AlignCenter)
        self.description_label.setAlignment(Qt.AlignCenter)

        # Assign object names to widgets (used in stylesheet for custom styling)
        self.city_label.setObjectName("city_label")
        self.city_input.setObjectName("city_input")
        self.get_weather_button.setObjectName("get_weather_button")
        self.temperature_label.setObjectName("temperature_label")
        self.emoji_label.setObjectName("emoji_label")
        self.description_label.setObjectName("description_label")
        
        # Define the visual style (CSS-like syntax)
        self.setStyleSheet("""
            QLabel, QPushButton {
                font-family: calibri;  /* Default font for labels and buttons */
            }
            QLabel#city_label {
                font-size: 40px;
                font-style: italic;
            }
            QLineEdit#city_input {
                font-size: 40px;
            }
            QPushButton#get_weather_button {
                font-size: 30px;
                font-weight: bold;
            }
            QLabel#temperature_label {
                font-size: 75px;
            }
            QLabel#emoji_label {
                font-size: 100px;
                font-family: 'Segoe UI emoji';  /* Emoji font */
            }
            QLabel#description_label {
                font-size: 50px;
            }
        """)

# Only run the following code if the script is executed directly (not imported)
if __name__ == "__main__":
    app = QApplication(sys.argv)      # Create the application object
    weather_app = WeatherApp()        # Instantiate the WeatherApp class
    weather_app.show()                # Display the window
    sys.exit(app.exec_())             # Start the event loop and exit cleanly when closed
