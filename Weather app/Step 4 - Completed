import sys
import requests
from PyQt5.QtWidgets import (QApplication, QWidget, QLabel,
                                                       QLineEdit, QPushButton, QVBoxLayout)
from PyQt5.QtCore import Qt


class WeatherApp(QWidget):
    def __init__(self):
        super().__init__()
        # --- Create UI elements ---
        self.city_label = QLabel("Enter city name: ", self)    # Label prompting the user to enter a city
        self.city_input = QLineEdit(self)                       # Text box for user to input city name
        self.get_weather_button = QPushButton("Get Weather", self)  # Button to fetch weather
        self.temperature_label = QLabel(self)                   # Displays temperature
        self.emoji_label = QLabel(self)                         # Displays emoji (based on weather)
        self.description_label = QLabel(self)                   # Displays description (e.g., "light rain")

        self.initUI()  # Call the function that sets up layout and styling

    def initUI(self):
        """Setup the window layout, alignment, and design."""
        self.setWindowTitle("Weather App")  # Set window title

        # --- Layout Setup ---
        vbox = QVBoxLayout()  # Create a vertical box layout

        # Add widgets to layout (top to bottom)
        vbox.addWidget(self.city_label)
        vbox.addWidget(self.city_input)
        vbox.addWidget(self.get_weather_button)
        vbox.addWidget(self.temperature_label)
        vbox.addWidget(self.emoji_label)
        vbox.addWidget(self.description_label)

        self.setLayout(vbox)  # Apply layout to window

        # --- Align all labels and text fields to center ---
        self.city_label.setAlignment(Qt.AlignCenter)
        self.city_input.setAlignment(Qt.AlignCenter)
        self.temperature_label.setAlignment(Qt.AlignCenter)
        self.emoji_label.setAlignment(Qt.AlignCenter)
        self.description_label.setAlignment(Qt.AlignCenter)

        # --- Assign object names for CSS styling (important for QSS stylesheet) ---
        self.city_label.setObjectName("city_label")
        self.city_input.setObjectName("city_input")
        self.get_weather_button.setObjectName("get_weather_button")
        self.temperature_label.setObjectName("temperature_label")
        self.emoji_label.setObjectName("emoji_label")
        self.description_label.setObjectName("description_label")

        # --- Styling section using QSS (Qt CSS) ---
        self.setStyleSheet("""
            QLabel, QPushButton{
                font-family: calibri;
            }
            QLabel#city_label{
                font-size: 40px;
                font-style: italic;
            }
            QLineEdit#city_input{
                font-size: 40px;
            }
            QPushButton#get_weather_button{
                font-size: 30px;
                font-weight: bold;
            }
            QLabel#temperature_label{
                font-size: 75px;
            }
            QLabel#emoji_label{
                font-size: 100px;
                font-family: Segoe UI emoji;
            }
            QLabel#description_label{
                font-size: 50px;
            }
        """)

        # Connect button click to function that fetches weather data
        self.get_weather_button.clicked.connect(self.get_weather)

    def get_weather(self):
        """Fetch weather data from OpenWeatherMap API."""
        api_key = "[enter API key]"  # Your API key
        city = self.city_input.text()  # Get user input (city name)
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"  # Build request URL

        try:
            # Send request and check for errors
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            # If city found (status code 200), display weather data
            if data["cod"] == 200:
                self.display_weather(data)

        # --- Added: Detailed HTTP error handling using Python 3.10+ 'match' syntax ---
        except requests.exceptions.HTTPError as http_error:
            match response.status_code:
                case 400:
                    self.display_error("Bad request:\nPlease check your input")
                case 401:
                    self.display_error("Unauthorized:\nInvalid API key")
                case 403:
                    self.display_error("Forbidden:\nAccess is denied")
                case 404:
                    self.display_error("Not found:\nCity not found")
                case 500:
                    self.display_error("Internal Server Error:\nPlease try again later")
                case 502:
                    self.display_error("Bad Gateway:\nInvalid response from the server")
                case 503:
                    self.display_error("Service Unavailable:\nServer is down")
                case 504:
                    self.display_error("Gateway Timeout:\nNo response from the server")
                case _:
                    self.display_error(f"HTTP error occurred:\n{http_error}")

        # --- Added: Broader request exception handling for better reliability ---
        except requests.exceptions.ConnectionError:
            self.display_error("Connection Error:\nCheck your internet connection")
        except requests.exceptions.Timeout:
            self.display_error("Timeout Error:\nThe request timed out")
        except requests.exceptions.TooManyRedirects:
            self.display_error("Too many Redirects:\nCheck the URL")
        except requests.exceptions.RequestException as req_error:
            self.display_error(f"Request Error:\n{req_error}")

    def display_error(self, message):
        """Display error messages in the GUI."""
        self.temperature_label.setStyleSheet("font-size: 30px;")  # Smaller font for errors
        self.temperature_label.setText(message)
        self.emoji_label.clear()  # Clear emoji field
        self.description_label.clear()  # Clear weather description

    def display_weather(self, data):
        """Display weather temperature, emoji, and description."""
        self.temperature_label.setStyleSheet("font-size: 75px;")  # Reset to normal style

        # --- Extract temperature values ---
        temperature_k = data["main"]["temp"]  # Kelvin
        temperature_c = temperature_k - 273.15  # Celsius conversion
        temperature_f = (temperature_k * 9/5) - 459.67  # Fahrenheit conversion

        # --- Extract weather description ---
        weather_id = data["weather"][0]["id"]  # Weather condition code
        weather_description = data["weather"][0]["description"]  # Text description

        # --- Display results in GUI ---
        self.temperature_label.setText(f"{temperature_f:.0f}°F")  # Show temperature
        self.emoji_label.setText(self.get_weather_emoji(weather_id))  # Show corresponding emoji
        self.description_label.setText(weather_description)  # Show weather description

    @staticmethod
    def get_weather_emoji(weather_id):
        """Return emoji based on weather condition code."""
        # --- Added: New method to map weather codes to emojis ---
        if 200 <= weather_id <= 232:
            return "⛈"
        elif 300 <= weather_id <= 321:
            return "🌦"
        elif 500 <= weather_id <= 531:
            return "🌧"
        elif 600 <= weather_id <= 622:
            return "❄"
        elif 701 <= weather_id <= 741:
            return "🌫"
        elif weather_id == 762:
            return "🌋"
        elif weather_id == 771:
            return "💨"
        elif weather_id == 781:
            return "🌪"
        elif weather_id == 800:
            return "☀"
        elif 801 <= weather_id <= 804:
            return "☁"
        else:
            return ""  # Default (no emoji if unrecognized)


if __name__ == "__main__":
    # Standard PyQt5 setup
    app = QApplication(sys.argv)      # Create the application object
    weather_app = WeatherApp()        # Instantiate our WeatherApp class
    weather_app.show()                # Display the GUI window
    sys.exit(app.exec_())             # Start the event loop and exit cleanly
