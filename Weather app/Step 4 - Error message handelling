# Import required libraries
import sys                    # For system-level functions (like exiting the program)
import requests               # For making API requests to fetch weather data
from PyQt5.QtWidgets import (  # Import PyQt5 widgets for the GUI layout and controls
    QApplication, QWidget, QLabel,
    QLineEdit, QPushButton, QVBoxLayout
)
from PyQt5.QtCore import Qt    # Provides constants (e.g., for text alignment)

# Define the main WeatherApp class
class WeatherApp(QWidget):
    def __init__(self):
        super().__init__()  # Initialize the QWidget base class

        # --- Create GUI elements ---
        self.city_label = QLabel("Enter city name: ", self)   # Label prompting user input
        self.city_input = QLineEdit(self)                     # Text field for entering a city
        self.get_weather_button = QPushButton("Get Weather", self)  # Button to fetch weather

        # Empty labels that will later display the results
        self.temperature_label = QLabel(self)
        self.emoji_label = QLabel(self)
        self.description_label = QLabel(self)

        # Initialize the UI setup
        self.initUI()

    def initUI(self):
        """Configures layout, alignment, styles, and button event."""
        self.setWindowTitle("Weather App")  # Window title

        # Create a vertical box layout to stack elements
        vbox = QVBoxLayout()

        # Add all widgets to the layout (in display order)
        vbox.addWidget(self.city_label)
        vbox.addWidget(self.city_input)
        vbox.addWidget(self.get_weather_button)
        vbox.addWidget(self.temperature_label)
        vbox.addWidget(self.emoji_label)
        vbox.addWidget(self.description_label)

        self.setLayout(vbox)  # Apply the layout to the window

        # --- Center-align all widgets ---
        self.city_label.setAlignment(Qt.AlignCenter)
        self.city_input.setAlignment(Qt.AlignCenter)
        self.temperature_label.setAlignment(Qt.AlignCenter)
        self.emoji_label.setAlignment(Qt.AlignCenter)
        self.description_label.setAlignment(Qt.AlignCenter)

        # --- Assign object names (used in CSS styling) ---
        self.city_label.setObjectName("city_label")
        self.city_input.setObjectName("city_input")
        self.get_weather_button.setObjectName("get_weather_button")
        self.temperature_label.setObjectName("temperature_label")
        self.emoji_label.setObjectName("emoji_label")
        self.description_label.setObjectName("description_label")

        # --- Apply stylesheet for fonts and sizes ---
        self.setStyleSheet("""
            QLabel, QPushButton {
                font-family: calibri;
            }
            QLabel#city_label {
                font-size: 40px;
                font-style: italic;
            }
            QLineEdit#city_input {
                font-size: 40px;
            }
            QPushButton#get_weather_button {
                font-size: 30px;
                font-weight: bold;
            }
            QLabel#temperature_label {
                font-size: 75px;
            }
            QLabel#emoji_label {
                font-size: 100px;
                font-family: Segoe UI emoji;
            }
            QLabel#description_label {
                font-size: 50px;
            }
        """)

        # Connect the "Get Weather" button to the get_weather() function
        self.get_weather_button.clicked.connect(self.get_weather)

    def get_weather(self):
        """Fetches weather data from OpenWeatherMap API for the given city."""
        api_key = "022b7eeda3d75c2c6bc5e9d9830f6d3d"  # Your API key
        city = self.city_input.text()  # Read city name from user input

        # Construct the API request URL
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"

        try:
            # Send the HTTP request
            response = requests.get(url)
            response.raise_for_status()  # Raise an exception if status code is 4xx/5xx
            data = response.json()       # Parse JSON response

            # If valid response received, display the weather
            if data["cod"] == 200:
                self.display_weather(data)

        # --- Handle specific HTTP errors ---
        except requests.exceptions.HTTPError as http_error:
            match response.status_code:
                case 400:
                    self.display_error("Bad request:\nPlease check your input")
                case 401:
                    self.display_error("Unauthorized:\nInvalid API key")
                case 403:
                    self.display_error("Forbidden:\nAccess is denied")
                case 404:
                    self.display_error("Not found:\nCity not found")
                case 500:
                    self.display_error("Internal Server Error:\nPlease try again later")
                case 502:
                    self.display_error("Bad Gateway:\nInvalid response from the server")
                case 503:
                    self.display_error("Service Unavailable:\nServer is down")
                case 504:
                    self.display_error("Gateway Timeout:\nNo response from the server")
                case _:
                    self.display_error(f"HTTP error occurred:\n{http_error}")

        # --- Handle other connection or request errors ---
        except requests.exceptions.ConnectionError:
            self.display_error("Connection Error:\nCheck your internet connection")
        except requests.exceptions.Timeout:
            self.display_error("Timeout Error:\nThe request timed out")
        except requests.exceptions.TooManyRedirects:
            self.display_error("Too many Redirects:\nCheck the URL")
        except requests.exceptions.RequestException as req_error:
            self.display_error(f"Request Error:\n{req_error}")

    def display_error(self, message):
        """Displays error messages inside the temperature label."""
        self.temperature_label.setStyleSheet("font-size: 30px;")  # Smaller font for errors
        self.temperature_label.setText(message)
        self.emoji_label.clear()           # Clear emoji
        self.description_label.clear()     # Clear description text

    def display_weather(self, data):
        """Extracts and displays temperature, emoji, and description from API data."""
        self.temperature_label.setStyleSheet("font-size: 75px;")

        # Extract temperature in Kelvin and convert to Celsius & Fahrenheit
        temperature_k = data["main"]["temp"]
        temperature_c = temperature_k - 273.15
        temperature_f = (temperature_k * 9/5) - 459.67

        # Extract weather description and ID for emoji mapping
        weather_id = data["weather"][0]["id"]
        weather_description = data["weather"][0]["description"]

        # Update labels with the fetched data
        self.temperature_label.setText(f"{temperature_f:.0f}¬∞F")
        self.emoji_label.setText(self.get_weather_emoji(weather_id))
        self.description_label.setText(weather_description)

    # NOTE: get_weather_emoji() is expected but not defined yet.
    # It should return an emoji string (e.g., ‚òÄÔ∏è, üåßÔ∏è, üå®Ô∏è) based on weather_id.
    # Example implementation:
    # def get_weather_emoji(self, weather_id):
    #     if 200 <= weather_id < 300: return "‚õàÔ∏è"
    #     elif 300 <= weather_id < 600: return "üåßÔ∏è"
    #     elif 600 <= weather_id < 700: return "‚ùÑÔ∏è"
    #     elif 700 <= weather_id < 800: return "üå´Ô∏è"
    #     elif weather_id == 800: return "‚òÄÔ∏è"
    #     else: return "‚òÅÔ∏è"

# --- Run the application ---
if __name__ == "__main__":
    app = QApplication(sys.argv)  # Initialize the application
    weather_app = WeatherApp()    # Create instance of WeatherApp
    weather_app.show()            # Display the GUI
    sys.exit(app.exec_())         # Start the main event loop
